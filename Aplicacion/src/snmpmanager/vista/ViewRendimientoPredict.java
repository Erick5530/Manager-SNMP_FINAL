/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package snmpmanager.vista;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.rrd4j.ConsolFun;
import org.rrd4j.DsType;
import org.rrd4j.core.RrdDb;
import org.rrd4j.core.RrdDef;
import org.rrd4j.core.Sample;
import org.rrd4j.core.Util;
import org.rrd4j.data.Variable;
import org.rrd4j.graph.RrdGraph;
import org.rrd4j.graph.RrdGraphDef;
import snmpmanager.SNMP.SNMPManager;
import snmpmanager.SNMP.Snmpwalk;
import snmpmanager.modelo.dal.AgenteDAL;
import snmpmanager.modelo.entidades.AgenteSNMP;

/**
 *
 * @author Isaac
 */
public class ViewRendimientoPredict extends javax.swing.JFrame {

    Timer tDaemonRendimiento;
    SNMPManager cliente;
    Timer tGraph;
    String umbralMaximoCPU;
    String porcentajeMax;
    /**
     * Creates new form ViewRendimientoPredict
     */
    public ViewRendimientoPredict() {
        initComponents();
        startDaemons();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        lblHostName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblHost = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblPort = new javax.swing.JLabel();
        lblPredict = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel6.setText("Host");

        lblHostName.setText("Host");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Monitor de Rendimiento");

        lblHost.setText("Host");

        jLabel4.setText("IP");

        jLabel5.setText("Puerto");

        lblPort.setText("Puerto");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPredict, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHost)
                        .addGap(162, 162, 162)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPort)
                                .addGap(226, 226, 226)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblHostName)))))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(lblHostName))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblHost)
                        .addComponent(jLabel4))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(lblPort)))
                .addGap(18, 18, 18)
                .addComponent(lblPredict, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        tDaemonRendimiento.cancel();
        tDaemonRendimiento.purge();
        tGraph.cancel();
        tGraph.purge();
    }//GEN-LAST:event_formWindowClosing

    private void startDaemons() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    cliente = new SNMPManager("udp:" + lblHost.getText() + "/" + lblPort.getText());
                    AgenteDAL adal = new AgenteDAL();
                    AgenteSNMP a = adal.obtenerUnAgente(lblHost.getText());
                    System.out.println("IP " + lblHost.getText());
                    System.out.println("Agente comunidad " + a.getComunidad());
                    cliente.comunidad = a.getComunidad();
                    cliente.start();
                    String[] name = lblHost.getText().split("\\.");
                    System.out.println("Name " + name.length);
                    //Recoleccion de datos de CPU, Memoria y Disco Duro
                    
//                    String rrdPAth = "src/snmpmanager/db/rrdPerformance/rrd" + name[3];
                    String rrdPAth = "src/snmpmanager/db/rrdPerformance/source3";
//                    RrdDef rrdDef = new RrdDef(rrdPAth + ".rrd");

//                    //Declaracion de 4 DataSources
//                    rrdDef.setStartTime(Util.getTime() -100);
//                    rrdDef.setStep(10);
//                    //Almacenar los datos asi como son con GAUGE
//                    rrdDef.addDatasource("cpuusage1", DsType.GAUGE, 600, Double.NaN, Double.NaN);
////                    //Uso de CPU para ejercicio
//                    rrdDef.addDatasource("cpuusage2", DsType.GAUGE, 600, Double.NaN, Double.NaN);
////                    rrdDef.addDatasource("cpuusage3", DsType.GAUGE, 600, Double.NaN, Double.NaN);
////                    rrdDef.addDatasource("cpuusage4", DsType.GAUGE, 600, Double.NaN, Double.NaN);
//                    //-------------------------------------------------------------
//                    //rrdDef.addDatasource("cpuusage", DsType.GAUGE, 600, Double.NaN, Double.NaN);
//                    rrdDef.addDatasource("memoria", DsType.GAUGE, 600, Double.NaN, Double.NaN);
//                    rrdDef.addDatasource("hdd", DsType.GAUGE, 600, Double.NaN, Double.NaN);
//                    rrdDef.addArchive(ConsolFun.AVERAGE, 0.5, 1, 24);
//                    RrdDb rrdDb = new RrdDb(rrdDef);
//                    rrdDb.close();
//
//                    rrdDb = new RrdDb(rrdPAth + ".rrd");
                    tDaemonRendimiento = new Timer();
                    tDaemonRendimiento.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            try {
//                                RrdDb rrdDb = new RrdDb(rrdPAth + ".rrd");
//                                Snmpwalk walo = new Snmpwalk();
//                                walo.commStr = cliente.comunidad;
//                                walo.portNum = lblPort.getText();
//                                walo.targetAddr = lblHost.getText();
//                                //Uso de CPU
//                                double cpuUsage = walo.getCPUUsage();
//                                double hddUsage = walo.getHDD();
//                                double memUsage = walo.getRAM();
//
//                                //Uso de HDD
//                                //Uso de RAM
//                                Sample sample = rrdDb.createSample();
//                                sample.setTime(Util.getTime());
////                                sample.setValue("cpuusage", cpuUsage);
//                                sample.setValue("hdd", hddUsage);
//                                sample.setValue("memoria", memUsage);
//                                sample.setValue("cpuusage1",Snmpwalk.listaUsoCPU.get(0));
//                                sample.setValue("cpuusage2",Snmpwalk.listaUsoCPU.get(1));
////                                sample.setValue("cpuusage3",Snmpwalk.listaUsoCPU.get(2));
////                                sample.setValue("cpuusage4",Snmpwalk.listaUsoCPU.get(3));
//                                sample.update();
//                                rrdDb.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }, 0, 1000);

                    
                    tGraph = new Timer();
                    tGraph.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            try {
                                porcentajeMax = "90";
                                String rrdPath = rrdPAth + "new";
                                String myDate = "2017/10/09 13:50:00";
                                SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                                Date date = sdf.parse(myDate);
                                long millis = date.getTime();
                                millis = 1539656743;
                                RrdDb rrdDb = new RrdDb(rrdPath+".rrd", "rrdtool:/" + rrdPAth + ".rrd");
                                RrdGraphDef graphDef = new RrdGraphDef();
                                graphDef.setTimeSpan(millis, millis + 16000);
                                graphDef.datasource("CPUload", rrdPath + ".rrd", "CPUload", ConsolFun.AVERAGE);
                                graphDef.area("CPUload", Color.YELLOW, "CPU 1");
                                graphDef.hrule(Double.parseDouble(porcentajeMax), Color.RED);
                                //graphDef.area(5, Color.BLUE, false);
                                //VDEF Last Carga
                                Variable cpuLast = new Variable.LAST();
                                //VDEF cpu min
                                Variable cpumin = new Variable.MIN();
                                //VDEF cpu avg
                                Variable cpuavg = new Variable.AVERAGE();
                                //VDEF cpu max
                                Variable cpumax = new Variable.MAX();
                                
                                graphDef.datasource("cpuLast", "CPUload", cpuLast);
                                graphDef.datasource("cpumin", "CPUload", cpumin);
                                graphDef.datasource("cpuavg", "CPUload", cpuavg);
                                graphDef.datasource("cpumax", "CPUload", cpumax);
                                graphDef.gprint("cpuLast", "%12.0lf%s");
                                graphDef.gprint("cpumin", "%10.0lf%s");
                                graphDef.gprint("cpuavg", "%13.0lf%s");
                                graphDef.gprint("cpumax", "%13.0lf%s");
                                
                                //VDEF a
                                Variable aa = new Variable.LSLSLOPE();
                                graphDef.datasource("aa", "CPUload", aa);
                                Variable b = new Variable.LSLINT();
                                graphDef.datasource("b", "CPUload", b);
                                
                                graphDef.datasource("avg2", "CPUload,POP,aa,COUNT,*,b,+");
                                graphDef.datasource("pred", "avg2,"+porcentajeMax+",100,LIMIT");
                                //Pediccion de toque minimo.
                                Variable minPred = new Variable.FIRST();
                                graphDef.datasource("minPred", "pred", minPred);
                                //PRediccion de toque maximo
                                Variable maxPred = new Variable.LAST();
                                graphDef.datasource("maxPred", "pred", maxPred);
                                
                                graphDef.area("pred", new Color(0xffcccc));
                                
                                graphDef.gprint("minPred",  "  Alcanzaras el"+porcentajeMax+ "%% el %tc ", true);
                                
                                graphDef.line("avg2", Color.GREEN);
                                graphDef.setFilename(rrdPath + ".png");
                                graphDef.setMaxValue(100);
                                graphDef.setMinValue(0);
                                RrdGraph graph = new RrdGraph(graphDef);
                                BufferedImage bi = new BufferedImage(500, 350, BufferedImage.TYPE_INT_RGB);
                                graph.render(bi.getGraphics());
                                rrdDb.close();
                                                                                         
                                try {

                                    BufferedImage img = ImageIO.read(new File(rrdPath + ".png"));
                                    Image dimg = img.getScaledInstance(500, 350, Image.SCALE_SMOOTH);
                                    ImageIcon imageIcon = new ImageIcon(dimg);
                                    lblPredict.setIcon(imageIcon);
                                    lblPredict.setText("");

                                } catch (IOException e) {
                                    System.out.println("No se ha podido renderizar imagen " + e.getMessage());
                                    e.printStackTrace();
                                }
                                graph.render(bi.getGraphics());
                                //Imprime las lineas impresas dentro de RDFGraph info, devuelve un arreglo de cadenas
//                                System.out.println(graph.getRrdGraphInfo().getPrintLines()[0]);
//                                double umbralCPU = Double.parseDouble(graph.getRrdGraphInfo().getPrintLines()[0]);
//                                System.out.println("Umbral CPU " + umbralCPU);
//                                contadorEnvioDeCorreoCPU --;
//                                if (umbralCPU > 50 && contadorEnvioDeCorreoCPU <= 0) {
//                                    //Enviar Correo Cada 15 minutos
//                                    contadorEnvioDeCorreoCPU = 900;
//                                    SendMail.enviarEmail("", "Estado Maximo CPU", "Revisar el Agente " + lblHostName.getText());
//                                }
                                //rrdDb.dumpXml(rrdPAth + ".xml");
                                rrdDb.close(); 
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }, 0, 1000);
                } catch (IOException ex) {
                    Logger.getLogger(ViewRendimiento.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewRendimientoPredict.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewRendimientoPredict.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewRendimientoPredict.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewRendimientoPredict.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewRendimientoPredict().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public javax.swing.JLabel lblHost;
    public javax.swing.JLabel lblHostName;
    public javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblPredict;
    // End of variables declaration//GEN-END:variables
}

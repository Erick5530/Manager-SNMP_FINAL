/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package snmpmanager.vista;

import snmpmanager.SNMP.SNMPManager;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.rrd4j.ConsolFun;
import org.rrd4j.DsType;
import org.rrd4j.core.RrdDb;
import org.rrd4j.core.RrdDef;
import org.rrd4j.core.Sample;
import org.rrd4j.core.Util;
import org.rrd4j.graph.RrdGraph;
import org.rrd4j.graph.RrdGraphDef;
import org.snmp4j.smi.OID;
import snmpmanager.SNMP.Snmpwalk;
import snmpmanager.modelo.dal.AgenteDAL;
import snmpmanager.modelo.entidades.AgenteSNMP;

/**
 *
 * @author Dell
 */
public class ViewMonitorDisp extends javax.swing.JFrame {

    Timer tSamples;
    Timer tMonitorGraph;
    Long countTime;
    int contadorRefresco;
    String port, ip;
    /**
     * Creates new form ViewMonitorDisp
     */
    private SNMPManager client;
    public ViewMonitorDisp() {
        initComponents();
        startGettingName();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtIP = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPuerto = new javax.swing.JTextField();
        lblGraficaStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Monitor de Recursos de Dispositivo");

        jLabel2.setText("HostName: ");

        jLabel3.setText("Direccion IP");

        jLabel4.setText("Puerto");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(230, 230, 230)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(lblGraficaStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(lblGraficaStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        tSamples.cancel();
        tSamples.purge();
        tMonitorGraph.cancel();
        tMonitorGraph.purge();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewMonitorDisp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewMonitorDisp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewMonitorDisp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewMonitorDisp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewMonitorDisp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblGraficaStatus;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPuerto;
    // End of variables declaration//GEN-END:variables

    private void startGettingName() {
        try{
            port = ViewManager.monitorPort;
            ip = ViewManager.monitorIP;
            client = new SNMPManager("udp:" + ip + "/" + port);
            AgenteDAL adal = new AgenteDAL();
            AgenteSNMP a = adal.obtenerUnAgente(ViewManager.monitorIP);
            client.comunidad = a.getComunidad();
            client.start();
            txtIP.setText(a.getIp());
            txtName.setText(client.getAsString(new OID(".1.3.6.1.2.1.1.5.0")));
            txtPuerto.setText(a.getPuerto());
            graphAll();
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    private void graphAll()
    {
        try{
            String[] name = ip.split("\\.");
            System.out.println("Name " + name.length);
            String rrdPAth = "src/snmpmanager/db/RRDMonitor" + name[3];
            RrdDef rrdDef = new RrdDef(rrdPAth+".rrd");

            rrdDef.setStartTime(Util.getTime() -100);
            rrdDef.setStep(10);
            //Trafico Entraada y Salida
            rrdDef.addDatasource("inoctets", DsType.COUNTER, 600, Double.NaN, Double.NaN);
            rrdDef.addDatasource("outoctets", DsType.COUNTER, 600, Double.NaN, Double.NaN);
            //Paquetes UDP
            rrdDef.addDatasource("indatagrams", DsType.COUNTER, 600, Double.NaN, Double.NaN);
            rrdDef.addDatasource("outdatagrams", DsType.COUNTER, 600, Double.NaN, Double.NaN);
            //Segmentos TCP
            rrdDef.addDatasource("insegments", DsType.COUNTER, 600, Double.NaN, Double.NaN);
            rrdDef.addDatasource("outsegments", DsType.COUNTER, 600, Double.NaN, Double.NaN);
            //Mensajes ICMP
            rrdDef.addDatasource("inmessages", DsType.COUNTER, 600, Double.NaN, Double.NaN);
            rrdDef.addDatasource("outmessages", DsType.COUNTER, 600, Double.NaN, Double.NaN);
            //SNMP in Packages
            rrdDef.addDatasource("insnmp", DsType.COUNTER, 600, Double.NaN, Double.NaN);
            rrdDef.addDatasource("ousnmp", DsType.COUNTER, 600, Double.NaN, Double.NaN);
            rrdDef.addArchive(ConsolFun.AVERAGE, 0.5, 1, 600);
            rrdDef.addArchive(ConsolFun.AVERAGE, 0.5, 6, 700);
            RrdDb rrdDb = new RrdDb(rrdDef);
            rrdDb.close();
            
            rrdDb = new RrdDb(rrdPAth + ".rrd");
            
            tSamples = new Timer();
            tSamples.schedule(new TimerTask() {
                @Override
                public void run() {
                    try {
                        RrdDb rrdDb = new RrdDb(rrdPAth + ".rrd");
                        Snmpwalk walo = new Snmpwalk();
                        walo.commStr = client.comunidad;
                        walo.portNum = port;
                        walo.targetAddr = ip;
                        ArrayList<String> data = walo.getInOutOctetsFromIndex3();
                        Sample sample = rrdDb.createSample();
                        String octets = ":" + Double.parseDouble(data.get(0)) + ":" + Double.parseDouble(data.get(1));
                        String udp = ":" + client.getAsString(new OID(".1.3.6.1.2.1.7.1.0")) + ":"
                                + client.getAsString(new OID(".1.3.6.1.2.1.7.4.0"));
                        String tcp = ":" + client.getAsString(new OID(".1.3.6.1.2.1.6.10.0")) + ":"
                                + client.getAsString(new OID(".1.3.6.1.2.1.6.11.0"));
                        String icmp = ":" + client.getAsString(new OID(".1.3.6.1.2.1.5.1.0")) + ":"
                                + client.getAsString(new OID(".1.3.6.1.2.1.5.15.0"));
                        String snmp = ":" + client.getAsString(new OID(".1.3.6.1.2.1.11.1.0")) + ":"
                                + client.getAsString(new OID(".1.3.6.1.2.1.11.2.0"));
                        sample.setAndUpdate(Util.getTime() + octets + udp + tcp + icmp + snmp);
                        System.out.println(Util.getTime() + octets + udp + tcp + icmp + snmp);
                        rrdDb.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }, 0, 1000);
            
            contadorRefresco = 0;
            tMonitorGraph = new Timer();
            tMonitorGraph.schedule(new TimerTask() {
                @Override
                public void run() {
                    try {
                        RrdDb rrdDb = new RrdDb(rrdPAth+".rrd");
                        RrdGraphDef graphDef = new RrdGraphDef();
                        //Octetos
                        graphDef.setTimeSpan(Util.getTime()-100, Util.getTime());
                        graphDef.datasource("outoctets", rrdPAth+".rrd", "outoctets", ConsolFun.AVERAGE);
                        graphDef.datasource("inoctets", rrdPAth+".rrd", "inoctets", ConsolFun.AVERAGE);
                        graphDef.area("inoctets", Color.BLACK, "In Traffic");
                        graphDef.line("outoctets", Color.BLUE, "Out Traffic", 2);
                        //UDP

                        graphDef.datasource("outdatagrams", rrdPAth+".rrd", "outdatagrams", ConsolFun.AVERAGE);
                        graphDef.datasource("indatagrams", rrdPAth+".rrd", "indatagrams", ConsolFun.AVERAGE);
                        graphDef.area("indatagrams", Color.CYAN, "In Datagrams");
                        graphDef.line("outdatagrams", Color.DARK_GRAY, "Out Datargrams", 2);
                        //TCP

                        graphDef.datasource("outsegments", rrdPAth+".rrd", "outsegments", ConsolFun.AVERAGE);
                        graphDef.datasource("insegments", rrdPAth+".rrd", "insegments", ConsolFun.AVERAGE);
                        graphDef.area("insegments", Color.GREEN, "In Segments");
                        graphDef.line("outsegments", Color.LIGHT_GRAY, "Out Segments", 2);
                        //ICMP

                        graphDef.datasource("outmessages", rrdPAth+".rrd", "outmessages", ConsolFun.AVERAGE);
                        graphDef.datasource("inmessages", rrdPAth+".rrd", "inmessages", ConsolFun.AVERAGE);
                        graphDef.area("inmessages", Color.MAGENTA, "In ICM Messages");
                        graphDef.line("outmessages", Color.ORANGE, "Out ICMP Messages", 2);
                        //SNMP

                        graphDef.datasource("ousnmp", rrdPAth+".rrd", "ousnmp", ConsolFun.AVERAGE);
                        graphDef.datasource("insnmp", rrdPAth+".rrd", "insnmp", ConsolFun.AVERAGE);
                        graphDef.area("insnmp", Color.PINK, "In SNMP Data");
                        graphDef.line("ousnmp", Color.RED, "Out SNMP Data", 2);
                        graphDef.setFilename(rrdPAth+".gif");
                        RrdGraph graph = new RrdGraph(graphDef);
                        BufferedImage bi = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);
                        try {

                        BufferedImage img = ImageIO.read(new File(rrdPAth+".gif"));
                        Image dimg = img.getScaledInstance(580, 280, Image.SCALE_SMOOTH);
                        ImageIcon imageIcon = new ImageIcon(dimg);
                        lblGraficaStatus.setIcon(imageIcon);
                        lblGraficaStatus.setText("");
                        contadorRefresco += 100;
                    } catch (Exception e) {
                        System.out.println("No se ha podido renderizar imagen " + e.getMessage());
                    }
                        graph.render(bi.getGraphics());
                        rrdDb.dumpXml(rrdPAth+".xml");
                        rrdDb.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }, 0, 1000);
        }catch(Exception e){
            e.printStackTrace();
        }
    }
}

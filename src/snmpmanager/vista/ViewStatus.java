/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package snmpmanager.vista;

import snmpmanager.SNMP.SNMPManager;
import snmpmanager.SNMP.Snmpwalk;
import org.snmp4j.smi.OID;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Timer;
import java.util.TimerTask;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.rrd4j.ConsolFun;
import org.rrd4j.DsType;

import org.rrd4j.core.RrdDb;
import org.rrd4j.core.RrdDef;
import org.rrd4j.core.Sample;
import org.rrd4j.core.Util;
import org.rrd4j.graph.RrdGraph;
import org.rrd4j.graph.RrdGraphDef;
import snmpmanager.modelo.dal.AgenteDAL;
import snmpmanager.modelo.entidades.AgenteSNMP;
/**
 *
 * @author Dell
 */
public class ViewStatus extends javax.swing.JFrame {

    SNMPManager client;
    long countTime;
    private Timer tSamples;
    private Timer tGraph;
    long contadorRefresco;
    int soIndex;
    
    
    /**
     * Creates new form ViewStatus
     */
    public ViewStatus() {
        initComponents();
        startGettingInfo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtHostN = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtIP = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDescr = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtSO = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtInterfaces = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtLastRes = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtUbic = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtContac = new javax.swing.JTextField();
        lblGraficaStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Estado de Dispositivo");

        jLabel2.setText("Nombre de Host");

        txtHostN.setEditable(false);

        jLabel3.setText("Direccion IP");

        txtIP.setEditable(false);

        jLabel4.setText("Nombre");

        txtDescr.setEditable(false);

        jLabel5.setText("SO");

        txtSO.setEditable(false);

        jLabel6.setText("No Interfaces");

        txtInterfaces.setEditable(false);

        jLabel7.setText("Ultimo Reinicio");

        txtLastRes.setEditable(false);
        txtLastRes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastResActionPerformed(evt);
            }
        });

        jLabel8.setText("Tiempo encendido");

        txtUbic.setEditable(false);

        jLabel9.setText("Contacto");

        txtContac.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDescr, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSO, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtLastRes))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtHostN)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtContac, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(txtUbic, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtInterfaces, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblGraficaStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtHostN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDescr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtSO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtLastRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtInterfaces)
                        .addComponent(txtUbic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(txtContac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40)
                .addComponent(lblGraficaStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        tSamples.cancel();
        tGraph.cancel();
        tSamples.purge();
        tGraph.purge();
    }//GEN-LAST:event_formWindowClosing

    private void txtLastResActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastResActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastResActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewStatus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblGraficaStatus;
    private javax.swing.JTextField txtContac;
    private javax.swing.JTextField txtDescr;
    private javax.swing.JTextField txtHostN;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField txtInterfaces;
    private javax.swing.JTextField txtLastRes;
    private javax.swing.JTextField txtSO;
    private javax.swing.JTextField txtUbic;
    // End of variables declaration//GEN-END:variables

    private void startGettingInfo() {
        try {
            
            client = new SNMPManager("udp:" + ViewManager.statusIP + "/" + ViewManager.statusPort);
            AgenteDAL adal = new AgenteDAL();
            AgenteSNMP a = adal.obtenerUnAgente(ViewManager.statusIP);
            client.comunidad = a.getComunidad();
            client.start();
            
            txtHostN.setText(client.getAsString(new OID(".1.3.6.1.2.1.1.5.0")));
            txtContac.setText(client.getAsString(new OID(".1.3.6.1.2.1.1.4.0")));
            txtDescr.setText(client.getAsString(new OID(".1.3.6.1.2.1.1.1.0")));
            txtIP.setText(ViewManager.statusIP);
            txtInterfaces.setText(client.getAsString(new OID(".1.3.6.1.2.1.2.1.0")));
            
            txtSO.setText(client.getAsString(new OID(".1.3.6.1.2.1.1.1.0")));
            txtUbic.setText(client.getAsString(new OID(".1.3.6.1.2.1.1.3.0")));
            
            
            txtLastRes.setText(getUltimoReinicio(txtUbic.getText()));
            
            
            

            

        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            String[] name = ViewManager.statusIP.split("\\.");
            System.out.println("Name " + name.length);
            String rrdPAth = "src/snmpmanager/db/RRDAgente" + name[3];
            RrdDef rrdDef = new RrdDef(rrdPAth+".rrd");

            rrdDef.setStartTime(Util.getTime() -100);
            rrdDef.setStep(10);
            rrdDef.addDatasource("inoctets", DsType.COUNTER, 100, Double.NaN, Double.NaN);
            rrdDef.addDatasource("outoctets", DsType.COUNTER, 600, Double.NaN, Double.NaN);
            rrdDef.addArchive(ConsolFun.AVERAGE, 0.5, 1, 600);
            rrdDef.addArchive(ConsolFun.AVERAGE, 0.5, 6, 700);
            RrdDb rrdDb = new RrdDb(rrdDef);
            rrdDb.close();

            rrdDb = new RrdDb(rrdPAth + ".rrd");

            tSamples = new Timer();
            tSamples.schedule(new TimerTask() {
                @Override
                public void run() {
                    try {
                        RrdDb rrdDb = new RrdDb(rrdPAth + ".rrd");
                        Snmpwalk walo = new Snmpwalk();
                        walo.commStr = client.comunidad;
                        walo.portNum = ViewManager.statusPort;
                        walo.targetAddr = ViewManager.statusIP;
                        ArrayList<String> data = walo.getInOutOctetsFromIndex3();
                        Sample sample = rrdDb.createSample();
                        sample.setValue("inoctets", Double.parseDouble(data.get(0)));
                        sample.setValue("outoctets", Double.parseDouble(data.get(1)));
                        sample.update();
                        System.out.println(Util.getTime() + ":" + Double.parseDouble(data.get(0)) + ":" + Double.parseDouble(data.get(1)));
                        rrdDb.close();
                        txtUbic.setText(client.getAsString(new OID(".1.3.6.1.2.1.1.3.0")));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }, 0, 5000);

            contadorRefresco = 0;
            tGraph = new Timer();
            tGraph.schedule(new TimerTask() {
                @Override
                public void run() {
                    try {
                        RrdDb rrdDb = new RrdDb(rrdPAth + ".rrd");
                        RrdGraphDef graphDef = new RrdGraphDef();
                        graphDef.setTimeSpan(Util.getTime() - 100, Util.getTime());
                        graphDef.datasource("outoctets", rrdPAth + ".rrd", "outoctets", ConsolFun.AVERAGE);
                        graphDef.datasource("inoctets", rrdPAth + ".rrd", "inoctets", ConsolFun.AVERAGE);
                        graphDef.area("inoctets", Color.GREEN, "Trafico entrante");
                        graphDef.line("outoctets", new Color(0xFF, 0, 0), "Trafico saliente", 2);
                        graphDef.setFilename(rrdPAth + ".gif");
                        RrdGraph graph = new RrdGraph(graphDef);
                        BufferedImage bi = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);
                        try {

                            BufferedImage img = ImageIO.read(new File(rrdPAth + ".gif"));
                            Image dimg = img.getScaledInstance(400, 200, Image.SCALE_SMOOTH);
                            ImageIcon imageIcon = new ImageIcon(dimg);
                            lblGraficaStatus.setIcon(imageIcon);
                            lblGraficaStatus.setText("");
                        } catch (Exception e) {
                            System.out.println("No se ha podido renderizar imagen " + e.getMessage());
                        }
                        graph.render(bi.getGraphics());
                        rrdDb.dumpXml(rrdPAth + ".xml");
                        rrdDb.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }, 0, 5000);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    static void println(String msg) {
        //System.out.println(msg + " " + Util.getLapTime());
        System.out.println(msg);
    }
    
    
    private String getUltimoReinicio(String oid){
        
        String valuesHrs[] = oid.split(":");
        
        int horas = Integer.parseInt(valuesHrs[0]);
        int minutos = Integer.parseInt(valuesHrs[1]);
        horas = horas * 60;
        
        
          // Obtiene fecha y hora actuales
        Calendar fecha = Calendar.getInstance();
        fecha.add(Calendar.MINUTE, (-1)* (horas + minutos));
       
         return String.format("%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS", fecha);
    
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package snmpmanager.vista;

import Utils.SendMail;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import org.rrd4j.ConsolFun;
import org.rrd4j.DsType;
import org.rrd4j.core.RrdDb;
import org.rrd4j.core.RrdDef;
import org.rrd4j.core.Sample;
import org.rrd4j.core.Util;
import org.rrd4j.data.Variable;
import org.rrd4j.graph.RrdGraph;
import org.rrd4j.graph.RrdGraphDef;
import snmpmanager.SNMP.SNMPManager;
import snmpmanager.SNMP.Snmpwalk;
import snmpmanager.modelo.dal.AgenteDAL;
import snmpmanager.modelo.entidades.AgenteSNMP;

/**
 *
 * @author Isaac
 */
public class ViewRendimiento extends javax.swing.JFrame {

    public static String pathImagen;
    Timer tDaemonRendimiento;
    SNMPManager cliente;
    Timer tGraph;
    String umbralMaximoCPU;
    ArrayList<Double> listaCPU, listaHdd, listaRam;

    //TODO: Colocar estados minimos, set y maximos
    int counterreadyCPU1 = 0, countersetCPU1 = 0, countergoToCPU1 = 0;
    int counterreadyCPU2 = 0, countersetCPU2 = 0, countergoToCPU2 = 0;
    int counterreadyHDD = 0, countersetHDD = 0, countergoToHDD = 0;
    int counterreadyRAM = 0, countersetRAM = 0, countergoToRAM = 0;
   
    double readyCPU1 = 30, setCPU1 = 50, goToCPU1 = 80;
    double readyCPU2 = 30, setCPU2 = 50, goToCPU2 = 80;
    
    double readyCPU3 = 30, setCPU3 = 50, goToCPU3 = 80;
    double readyCPU4 = 30, setCPU4 = 50, goToCPU4 = 80;
    
    
    double readyHDD = 25, setHDD = 50, goToHDD = 90;
    double readyRAM = 50, setRAM = 65, goToRAM = 80;

    /**
     * Creates new form ViewRendimiento
     */
    public ViewRendimiento() {
        initComponents();
        listaCPU = new ArrayList<>();
        listaHdd = new ArrayList<>();
        listaRam = new ArrayList<>();
        startDaemons();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblHost = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblPort = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblHostName = new javax.swing.JLabel();
        lblRecursosCPU2 = new javax.swing.JLabel();
        lblRecursosHDD = new javax.swing.JLabel();
        lblRecursosRAM = new javax.swing.JLabel();
        lblRecursosCPU1 = new javax.swing.JLabel();
        lblRecursosCPU3 = new javax.swing.JLabel();
        lblRecursosCPU4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Monitor de Rendimiento");

        jLabel3.setText("Recursos del Sistema");

        lblHost.setText("Host");

        jLabel4.setText("IP");

        jLabel5.setText("Puerto");

        lblPort.setText("Puerto");

        jLabel6.setText("Host");

        lblHostName.setText("Host");

        lblRecursosCPU2.setText("cpu2");

        lblRecursosCPU1.setText("cpu1");

        lblRecursosCPU3.setText("cpu3");

        lblRecursosCPU4.setText("cpu4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblRecursosCPU1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblRecursosCPU3, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblRecursosCPU2, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblRecursosCPU4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblHost)
                                .addGap(162, 162, 162)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPort)
                                        .addGap(226, 226, 226)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblHostName))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(jLabel3)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRecursosRAM, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRecursosHDD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(100, 100, 100))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(lblHostName))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblHost)
                        .addComponent(jLabel4))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(lblPort)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblRecursosCPU3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRecursosCPU1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblRecursosCPU2, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                            .addComponent(lblRecursosCPU4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 41, Short.MAX_VALUE)
                        .addComponent(lblRecursosHDD, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRecursosRAM, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        tDaemonRendimiento.cancel();
        tDaemonRendimiento.purge();
        tGraph.cancel();
        tGraph.purge();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewRendimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewRendimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewRendimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewRendimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewRendimiento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public javax.swing.JLabel lblHost;
    public javax.swing.JLabel lblHostName;
    public javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblRecursosCPU1;
    private javax.swing.JLabel lblRecursosCPU2;
    private javax.swing.JLabel lblRecursosCPU3;
    private javax.swing.JLabel lblRecursosCPU4;
    private javax.swing.JLabel lblRecursosHDD;
    private javax.swing.JLabel lblRecursosRAM;
    // End of variables declaration//GEN-END:variables

    private void startDaemons() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    cliente = new SNMPManager("udp:" + lblHost.getText() + "/" + lblPort.getText());
                    AgenteDAL adal = new AgenteDAL();
                    AgenteSNMP a = adal.obtenerUnAgente(lblHost.getText());
                    System.out.println("IP " + lblHost.getText());
                    System.out.println("Agente comunidad " + a.getComunidad());
                    cliente.comunidad = a.getComunidad();
                    cliente.start();
                    String[] name = lblHost.getText().split("\\.");
                    System.out.println("Nombre " + name.length);
                    //Recoleccion de datos de CPU, Memoria y Disco Duro

                    String rrdPAth = "src/snmpmanager/db/rrdPerformance/rrd" + name[3];
                    RrdDef rrdDef = new RrdDef(rrdPAth + ".rrd");

                    //Declaracion de 4 DataSources
                    rrdDef.setStartTime(Util.getTime() - 100);
                    rrdDef.setStep(10);
                    //Almacenar los datos asi como son con GAUGE
                    rrdDef.addDatasource("cpuusage1", DsType.GAUGE, 600, Double.NaN, Double.NaN);
//                    //Uso de CPU para ejercicio
                    rrdDef.addDatasource("cpuusage2", DsType.GAUGE, 600, Double.NaN, Double.NaN);
                    rrdDef.addDatasource("cpuusage3", DsType.GAUGE, 600, Double.NaN, Double.NaN);
                    rrdDef.addDatasource("cpuusage4", DsType.GAUGE, 600, Double.NaN, Double.NaN);
                    //-------------------------------------------------------------
                    //rrdDef.addDatasource("cpuusage", DsType.GAUGE, 600, Double.NaN, Double.NaN);
                    rrdDef.addDatasource("memoria", DsType.GAUGE, 600, Double.NaN, Double.NaN);
                    rrdDef.addDatasource("hdd", DsType.GAUGE, 600, Double.NaN, Double.NaN);
                    rrdDef.addArchive(ConsolFun.AVERAGE, 0.5, 1, 24);
                    RrdDb rrdDb = new RrdDb(rrdDef);
                    rrdDb.close();

                    rrdDb = new RrdDb(rrdPAth + ".rrd");
                    tDaemonRendimiento = new Timer();
                    tDaemonRendimiento.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            try {
                                RrdDb rrdDb = new RrdDb(rrdPAth + ".rrd");
                                Snmpwalk walo = new Snmpwalk();
                                walo.commStr = cliente.comunidad;
                                walo.portNum = lblPort.getText();
                                walo.targetAddr = lblHost.getText();
                                //Uso de CPU
                                double cpuUsage = walo.getCPUUsage();
                                double hddUsage = walo.getHDD();
                                double memUsage = walo.getRAM();
                                //Uso de HDD
                                //Uso de RAM
                                Sample sample = rrdDb.createSample();
                                sample.setTime(Util.getTime());
//                                sample.setValue("cpuusage", cpuUsage);
                                sample.setValue("hdd", hddUsage);
                                sample.setValue("memoria", memUsage);
                                sample.setValue("cpuusage1", Snmpwalk.listaUsoCPU.get(0));
                                sample.setValue("cpuusage2",Snmpwalk.listaUsoCPU.get(1));
                                sample.setValue("cpuusage3",Snmpwalk.listaUsoCPU.get(2));
                                sample.setValue("cpuusage4",Snmpwalk.listaUsoCPU.get(3));
                                sample.update();
                                rrdDb.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }, 0, 1000);

                    tGraph = new Timer();
                    tGraph.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            try {

                                RrdDb rrdDb = new RrdDb(rrdPAth + ".rrd");

                                //_______________________CPU 1_______________________________
                                RrdGraphDef graphDef = new RrdGraphDef();
                                graphDef.setTimeSpan(Util.getTime() - 100, Util.getTime());
                                graphDef.datasource("cpuusage1", rrdPAth + ".rrd", "cpuusage1", ConsolFun.AVERAGE);

                                //-------- Para CPU 1--------------
                                //Declaracion de VDEF, para ver como se declara VDEF ve el ejemplo RRD4J Example en Escom Tip
                                Variable cpuusageMaxPoint = new Variable.MAX();
                                graphDef.datasource("cpuusageMaxPoint", "cpuusage1", cpuusageMaxPoint);
                                Variable currentPoint = new Variable.MIN();
                                graphDef.datasource("currentPoint", "cpuusage1", currentPoint);
                                //Imprimir dato en la grafica
                                graphDef.gprint("cpuusageMaxPoint", "Max CPU = %.3f%S %%");
                                graphDef.gprint("currentPoint", "Ready line on HDD = %.3f%S %%");
                                //Imprimir dato en RDGraph info, al hacer la graficacion  el aricho se genera.
                                graphDef.print("cpuusageMaxPoint", "%.3f%S");
                                graphDef.print("currentPoint", "%.3f%S");

                                graphDef.hrule(readyCPU1, new Color(0, 0, 102), "Ready CPU1", 3);
                                graphDef.hrule(setCPU1, new Color(51, 51, 255), "Set CPU1", 3);
                                graphDef.hrule(goToCPU1, new Color(102, 153, 255), "Go CPU1 \\j", 3);
                                graphDef.line("cpuusage1", new Color(2, 45, 189), "CPU", 1);
                                pathImagen = rrdPAth + "CPU1" + ".png";
                                graphDef.setFilename(rrdPAth + "CPU1" + ".png");
                                graphDef.setMaxValue(100);
                                graphDef.setMinValue(0);
                                RrdGraph graph = new RrdGraph(graphDef);
                                graph(graph, lblRecursosCPU1, rrdPAth + "CPU1", 0);

                                //-------- Para CPU 2--------------
                                graphDef = new RrdGraphDef();
                                graphDef.setTimeSpan(Util.getTime() - 100, Util.getTime());
                                graphDef.datasource("cpuusage2", rrdPAth + ".rrd", "cpuusage2", ConsolFun.AVERAGE);

                                //Declaracion de VDEF, para ver como se declara VDEF ve el ejemplo RRD4J Example en Escom Tip
                                Variable cpuusageMaxPoint2 = new Variable.MAX();
                                graphDef.datasource("cpuusageMaxPoint2", "cpuusage2", cpuusageMaxPoint2);
                                currentPoint = new Variable.MIN();
                                graphDef.datasource("currentPoint", "cpuusage2", currentPoint);
                                //Imprimir dato en la grafica
                                graphDef.gprint("cpuusageMaxPoint2", "Max CPU = %.3f%S %%");
                                graphDef.gprint("currentPoint", "Ready line on HDD = %.3f%S %%");
                                //Imprimir dato en RDGraph info, al hacer la graficacion  el aricho se genera.
                                graphDef.print("cpuusageMaxPoint2", "%.3f%S");
                                graphDef.print("currentPoint", "%.3f%S");

                                graphDef.hrule(readyCPU1, new Color(102, 0, 204), "Ready CPU2", 3);
                                graphDef.hrule(setCPU1, new Color(153, 51, 255), "Set CPU2", 3);
                                graphDef.hrule(goToCPU1, new Color(153, 102, 255), "Go CPU2 \\j", 3);
                                graphDef.line("cpuusage2", new Color(147, 2, 147), "CPU", 1);
                                graphDef.setFilename(rrdPAth + "CPU2" + ".png");
                                graphDef.setMaxValue(100);
                                graphDef.setMinValue(0);
                                graph = new RrdGraph(graphDef);
                                graph(graph, lblRecursosCPU2, rrdPAth + "CPU2", 3);
                                
                                
                                //-------- Para CPU 3--------------
                                graphDef = new RrdGraphDef();
                                graphDef.setTimeSpan(Util.getTime() - 100, Util.getTime());
                                graphDef.datasource("cpuusage3", rrdPAth + ".rrd", "cpuusage3", ConsolFun.AVERAGE);

                                //Declaracion de VDEF, para ver como se declara VDEF ve el ejemplo RRD4J Example en Escom Tip
                                Variable cpuusageMaxPoint3 = new Variable.MAX();
                                graphDef.datasource("cpuusageMaxPoint3", "cpuusage3", cpuusageMaxPoint3);
                                currentPoint = new Variable.MIN();
                                graphDef.datasource("currentPoint", "cpuusage3", currentPoint);
                                //Imprimir dato en la grafica
                                graphDef.gprint("cpuusageMaxPoint3", "Max CPU = %.3f%S %%");
                                graphDef.gprint("currentPoint", "Ready line on HDD = %.3f%S %%");
                                //Imprimir dato en RDGraph info, al hacer la graficacion  el aricho se genera.
                                graphDef.print("cpuusageMaxPoint3", "%.3f%S");
                                graphDef.print("currentPoint", "%.3f%S");

                                graphDef.hrule(readyCPU3, new Color(102, 0, 204), "Ready CPU3", 3);
                                graphDef.hrule(setCPU3, new Color(153, 51, 255), "Set CPU3", 3);
                                graphDef.hrule(goToCPU3, new Color(153, 102, 255), "Go CPU3 \\j", 3);
                                graphDef.line("cpuusage3", new Color(147, 2, 147), "CPU", 1);
                                graphDef.setFilename(rrdPAth + "CPU3" + ".png");
                                graphDef.setMaxValue(100);
                                graphDef.setMinValue(0);
                                graph = new RrdGraph(graphDef);
                                graph(graph, lblRecursosCPU3, rrdPAth + "CPU3", 3);
                                
                                //-------- Para CPU 4--------------
                                graphDef = new RrdGraphDef();
                                graphDef.setTimeSpan(Util.getTime() - 100, Util.getTime());
                                graphDef.datasource("cpuusage4", rrdPAth + ".rrd", "cpuusage4", ConsolFun.AVERAGE);

                                //Declaracion de VDEF, para ver como se declara VDEF ve el ejemplo RRD4J Example en Escom Tip
                                Variable cpuusageMaxPoint4 = new Variable.MAX();
                                graphDef.datasource("cpuusageMaxPoint4", "cpuusage4", cpuusageMaxPoint4);
                                currentPoint = new Variable.MIN();
                                graphDef.datasource("currentPoint", "cpuusage4", currentPoint);
                                //Imprimir dato en la grafica
                                graphDef.gprint("cpuusageMaxPoint4", "Max CPU = %.3f%S %%");
                                graphDef.gprint("currentPoint", "Ready line on HDD = %.3f%S %%");
                                //Imprimir dato en RDGraph info, al hacer la graficacion  el aricho se genera.
                                graphDef.print("cpuusageMaxPoint4", "%.3f%S");
                                graphDef.print("currentPoint", "%.3f%S");

                                graphDef.hrule(readyCPU4, new Color(102, 0, 204), "Ready CPU4", 3);
                                graphDef.hrule(setCPU4, new Color(153, 51, 255), "Set CPU4", 3);
                                graphDef.hrule(goToCPU4, new Color(153, 102, 255), "Go CPU4 \\j", 3);
                                graphDef.line("cpuusage4", new Color(147, 2, 147), "CPU", 1);
                                graphDef.setFilename(rrdPAth + "CPU4" + ".png");
                                graphDef.setMaxValue(100);
                                graphDef.setMinValue(0);
                                graph = new RrdGraph(graphDef);
                                graph(graph, lblRecursosCPU4, rrdPAth + "CPU4", 4);
                                
                                
                                //----------------- HDD ---------
                                graphDef = new RrdGraphDef();
                                graphDef.setTimeSpan(Util.getTime() - 100, Util.getTime());
                                graphDef.datasource("hdd", rrdPAth + ".rrd", "hdd", ConsolFun.AVERAGE);

                                //Declaracion de VDEF, para ver como se declara VDEF ve el ejemplo RRD4J Example en Escom Tip
                                Variable hddMaxPoint = new Variable.MAX();
                                currentPoint = new Variable.MIN();
                                graphDef.datasource("currentPoint", "hdd", currentPoint);
                                graphDef.datasource("hddMaxPoint", "hdd", hddMaxPoint);
                                //Imprimir dato en la grafica
                                graphDef.gprint("hddMaxPoint", "Max HDD = %.3f%S %%");
                                graphDef.gprint("currentPoint", "Ready line on HDD = %.3f%S %%");
                                //Imprimir dato en RDGraph info, al hacer la graficacion  el aricho se genera.
                                graphDef.print("hddMaxPoint", "%.3f%S");
                                graphDef.print("currentPoint", "%.3f%S");

                                graphDef.hrule(readyHDD, new Color(0, 153, 51), "Ready HDD", 3);
                                graphDef.hrule(setHDD, new Color(51, 204, 51), "Set HDD", 3);
                                graphDef.hrule(goToHDD, new Color(102, 255, 102), "Go HDD \\j", 3);
                                graphDef.line("hdd", new Color(170, 211, 44), "HDD", 1);
                                graphDef.setFilename(rrdPAth + "HDD" + ".png");
                                graphDef.setMaxValue(100);
                                graphDef.setMinValue(0);
                                graph = new RrdGraph(graphDef);
                                graph(graph, lblRecursosHDD, rrdPAth + "HDD", 1);

                                //----------------- RAM ---------
                                graphDef = new RrdGraphDef();
                                graphDef.setTimeSpan(Util.getTime() - 100, Util.getTime());
                                graphDef.datasource("memoria", rrdPAth + ".rrd", "memoria", ConsolFun.AVERAGE);
                                //Declaracion de VDEF, para ver como se declara VDEF ve el ejemplo RRD4J Example en Escom Tip
                                Variable memMaxPoint = new Variable.MAX();
                                graphDef.datasource("memMaxPoint", "memoria", memMaxPoint);
                                currentPoint = new Variable.MIN();
                                graphDef.datasource("currentPoint", "memoria", currentPoint);
                                //Imprimir dato en la grafica
                                graphDef.gprint("memMaxPoint", "Max MEM = %.3f%S %%");
                                graphDef.gprint("currentPoint", "Ready line on HDD = %.3f%S %%");
                                //Imprimir dato en RDGraph info, al hacer la graficacion  el aricho se genera.
                                graphDef.print("memMaxPoint", "%.3f%S");
                                graphDef.print("currentPoint", "%.3f%S");

                                graphDef.hrule(readyRAM, new Color(255, 204, 0), "Ready RAM", 3);
                                graphDef.hrule(setRAM, new Color(255, 153, 51), "Set RAM", 3);
                                graphDef.hrule(goToRAM, new Color(255, 102, 0), "Go RAM \\j", 3);
                                graphDef.line("memoria", new Color(255, 102, 102), "RAM", 1);
                                graphDef.setFilename(rrdPAth + "RAM" + ".png");
                                graphDef.setMaxValue(100);
                                graphDef.setMinValue(0);
                                graph = new RrdGraph(graphDef);
                                graph(graph, lblRecursosRAM, rrdPAth + "RAM", 2);

//                                BufferedImage bi = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB);
//                                try {
//
//                                    BufferedImage img = ImageIO.read(new File(rrdPAth + ".png"));
//                                    Image dimg = img.getScaledInstance(600, 300, Image.SCALE_SMOOTH);
//                                    ImageIcon imageIcon = new ImageIcon(dimg);
//                                    lblRecursosCPU2.setIcon(imageIcon);
//                                    lblRecursosCPU2.setText("");
//
//                                } catch (IOException e) {
//                                    System.out.println("No se ha podido renderizar imagen " + e.getMessage());
//                                    e.printStackTrace();
//                                }
//                                graph.render(bi.getGraphics());
//                                //Imprime las lineas impresas dentro de RDFGraph info, devuelve un arreglo de cadenas
//                                System.out.println(graph.getRrdGraphInfo().getPrintLines()[0]);
//                                double umbralCPU = Double.parseDouble(graph.getRrdGraphInfo().getPrintLines()[0]);
//                                System.out.println("Umbral CPU " + umbralCPU);
//                                contadorEnvioDeCorreoCPU --;
//                                if (umbralCPU > 50 && contadorEnvioDeCorreoCPU <= 0) {
//                                    //Enviar Correo Cada 15 minutos
//                                    contadorEnvioDeCorreoCPU = 900;
//                                    SendMail.enviarEmail("", "Estado Maximo CPU", "Revisar el Agente " + lblHostName.getText());
//                                }
                                rrdDb.dumpXml(rrdPAth + ".xml");
                                rrdDb.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }, 0, 1000);
                } catch (IOException ex) {
                    Logger.getLogger(ViewRendimiento.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();

    }
    //FLAG: 0 para CPU, 1 para HDD, 2 para RAM

    public void graph(RrdGraph graph, JLabel label, String rrPAth, int flag) {
        int contadorProxCorr = 900;
        BufferedImage bi = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB);
        try {

            BufferedImage img = ImageIO.read(new File(rrPAth + ".png"));
            Image dimg = img.getScaledInstance(300, 200, Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(dimg);
            label.setIcon(imageIcon);
            label.setText("");

        } catch (IOException e) {
            System.out.println("No se ha podido renderizar imagen " + e.getMessage());
            e.printStackTrace();
        }
        graph.render(bi.getGraphics());
        //Imprime las lineas impresas dentro de RDFGraph info, devuelve un arreglo de cadenas

        try {
            //System.out.println("El valor es " + graph.getRrdGraphInfo().getPrintLines()[0]);
            //System.out.println("El valor es " + graph.getRrdGraphInfo().getPrintLines()[1]);
        } catch (Exception e) {
            e.printStackTrace();
        }
        double umbralActual = Double.parseDouble(graph.getRrdGraphInfo().getPrintLines()[0]);
        double menor = Double.parseDouble(graph.getRrdGraphInfo().getPrintLines()[1]);
        System.out.println("Umbral " + flag + " " + umbralActual);
        System.out.println("Menor " + flag + " " + menor);
        counterreadyCPU1--;
        countersetCPU1--;
        countergoToCPU1--;
        counterreadyHDD--;
        countersetHDD--;
        countergoToHDD--;
        counterreadyRAM--;
        countersetRAM--;
        countergoToHDD--;
        switch (flag) {
            case 0:
                listaCPU.add(menor);
                readyCPU1 = calculateAverage(listaCPU);
                setCPU1 = mid(goToCPU1, readyCPU1);
                System.out.println("ready CPU " + readyCPU1);
                if (umbralActual > readyCPU1 && umbralActual < setCPU1 && counterreadyCPU1 <= 0) {
                    //Enviar Correo Cada 15 minutos
                    counterreadyCPU1 = contadorProxCorr;
                    SendMail.enviarEmail("", "Administracion de Servidor: Estado Minimo CPU", "Revisar el Agente " + lblHostName.getText() + " se encuentra al " + umbralActual + "%");
                } else if (umbralActual > setCPU1 && umbralActual < goToCPU1 && countersetCPU1 <= 0) {
                    countersetCPU1 = contadorProxCorr;
                    SendMail.enviarEmail("", "Administracion de Servidor: Estado Set CPU", "Revisar el Agente " + lblHostName.getText() + " se encuentra al " + umbralActual + "%");
                } else if (umbralActual > goToCPU1 && countergoToCPU1 <= 0) {
                    countergoToCPU1 = contadorProxCorr;
                    SendMail.enviarEmail("", "Administracion de Servidor: Estado Maximo CPU", "Revisar el Agente " + lblHostName.getText() + " se encuentra al " + umbralActual + "%");
                }
                break;
            case 1:
                listaHdd.add(menor);
                readyHDD = calculateAverage(listaHdd);
                setHDD = mid(goToHDD, readyHDD);
                System.out.println("MID HDD " + setHDD);
                if (umbralActual > readyHDD && umbralActual < setHDD && counterreadyHDD <= 0) {
                    //Enviar Correo Cada 15 minutos
                    counterreadyHDD = contadorProxCorr;
                    SendMail.enviarEmail("", "Estado Minimo HDD", "Revisar el Agente " + lblHostName.getText() + " se encuentra al " + umbralActual + "%");
                } else if (umbralActual > setHDD && umbralActual < goToHDD && countersetHDD <= 0) {
                    countersetHDD = contadorProxCorr;
                    SendMail.enviarEmail("", "Estado Set HDD", "Revisar el Agente " + lblHostName.getText() + " se encuentra al " + umbralActual + "%");
                } else if (umbralActual > goToHDD && countergoToHDD <= 0) {
                    countergoToHDD = contadorProxCorr;
                    SendMail.enviarEmail("", "Estado Maximo HDD", "Revisar el Agente " + lblHostName.getText() + " se encuentra al " + umbralActual + "%");
                }
                break;
            case 2:
                listaRam.add(menor);
                readyRAM = calculateAverage(listaRam);
                setHDD = mid(goToRAM, readyRAM);
                System.out.println("MID RAM " + setRAM);
                if (umbralActual > readyRAM && umbralActual < setRAM && counterreadyRAM <= 0) {
                    //Enviar Correo Cada 15 counterreadyRAM
                    counterreadyRAM = contadorProxCorr;
                    SendMail.enviarEmail("", "Estado Minimo RAM", "Revisar el Agente " + lblHostName.getText() + " se encuentra al " + umbralActual + "%");
                } else if (umbralActual > setRAM && umbralActual < goToRAM && countersetRAM <= 0) {
                    countersetRAM = contadorProxCorr;
                    SendMail.enviarEmail("", "Estado Set RAM", "Revisar el Agente " + lblHostName.getText() + " se encuentra al " + umbralActual + "%");
                } else if (umbralActual > goToRAM && countergoToRAM <= 0) {
                    countergoToRAM = contadorProxCorr;
                    SendMail.enviarEmail("", "Estado Maximo RAM", "Revisar el Agente " + lblHostName.getText() + " se encuentra al " + umbralActual + "%");
                }
                break;
        }
    }

    private double calculateAverage(List<Double> marks) {
        Double sum = 0.0;
        if (!marks.isEmpty()) {
            for (Double mark : marks) {
                if (!Double.isNaN(mark)) {
                    sum += mark;
                    //System.out.println("sum CPU " + mark);
                }
            }
            return sum / marks.size();
        }
        return sum;
    }

    public static double mid(double x, double y) {
        double r = x / 2 + y / 2 + (x % 2 + y % 2) / 2;
        if (Double.isNaN(r)) {
            return 0.0;
        } else {
            return r;
        }
    }

}

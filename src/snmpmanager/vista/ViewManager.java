/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package snmpmanager.vista;

import Utils.SNMPUtils;
import java.awt.MenuItem;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JButton;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import snmpmanager.SNMP.Snmpwalk;
import javax.swing.JOptionPane;
import org.snmp4j.smi.OID;
import snmpmanager.modelo.dal.AgenteDAL;
import snmpmanager.modelo.entidades.AgenteSNMP;

/**
 *
 * @author Dell
 */
public class ViewManager extends javax.swing.JFrame {

    /**
     * Creates new form ViewManager
     */
    public static String statusIP, statusPort;
    public static String monitorIP, monitorPort;
    private ArrayList<String> listaDevices;
    Timer tFreeMem;

    public ViewManager() {
        initComponents();
       
        cmbItemsEstado.removeAllItems();
        cmbMonitorDevices.removeAllItems();
        initializeDeviceList();
        startScanConnectedDevices();
        tFreeMem = new Timer();
        tFreeMem.schedule(new TimerTask() {
            @Override
            public void run() {
                SNMPUtils.freeMem();
            }
        }, 0,10000);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAEstatusGeneral = new javax.swing.JTextArea();
        btnAddAgente = new javax.swing.JButton();
        btnBorrarAgentes = new javax.swing.JButton();
        btnEstadoDisp = new javax.swing.JButton();
        btnMonitor = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbItemsEstado = new javax.swing.JComboBox<>();
        cmbMonitorDevices = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        mbarManager = new javax.swing.JMenuBar();
        jmenuRendimiento = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Inicio");

        jLabel2.setText("Interfaces inalambricas");

        txtAEstatusGeneral.setEditable(false);
        txtAEstatusGeneral.setColumns(20);
        txtAEstatusGeneral.setRows(5);
        jScrollPane1.setViewportView(txtAEstatusGeneral);

        btnAddAgente.setText("AÃ±adir Agente");
        btnAddAgente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAgenteActionPerformed(evt);
            }
        });

        btnBorrarAgentes.setText("Eliminar Agente");
        btnBorrarAgentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarAgentesActionPerformed(evt);
            }
        });

        btnEstadoDisp.setText("Seleccionar");
        btnEstadoDisp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstadoDispActionPerformed(evt);
            }
        });

        btnMonitor.setText("Monitor Dispositivos");
        btnMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMonitorActionPerformed(evt);
            }
        });

        jLabel3.setText("Estatus Dispositivo");

        cmbItemsEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbMonitorDevices.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Seleccione Dispositivo a Monitorear");

        jmenuRendimiento.setText("Edit");
        mbarManager.add(jmenuRendimiento);

        setJMenuBar(mbarManager);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel2)
                .addGap(168, 168, 168)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(btnMonitor, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                                                .addComponent(cmbMonitorDevices, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                .addGap(0, 88, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbItemsEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnEstadoDisp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnBorrarAgentes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddAgente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(59, 59, 59))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddAgente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBorrarAgentes)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbItemsEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEstadoDisp)
                        .addGap(43, 43, 43)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbMonitorDevices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMonitor))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddAgenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAgenteActionPerformed
        // TODO add your handling code here:
        new ViewAddDispositivo().setVisible(true);
    }//GEN-LAST:event_btnAddAgenteActionPerformed

    private void btnEstadoDispActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstadoDispActionPerformed
        // TODO add your handling code here:
        String[] infoUbicacion = cmbItemsEstado.getSelectedItem().toString().split(":");
        try {
            statusIP = infoUbicacion[1];
            statusPort = infoUbicacion[2];
            new ViewStatus().setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "No puedo acceder al dispositivo", "Error de conexion", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_btnEstadoDispActionPerformed

    private void btnBorrarAgentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarAgentesActionPerformed
        // TODO add your handling code here:
        String ipText = JOptionPane.showInputDialog("Cual es la IP del Agente");
        AgenteDAL adal = new AgenteDAL();
        adal.eliminaAgente(ipText);
    }//GEN-LAST:event_btnBorrarAgentesActionPerformed

    private void btnMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMonitorActionPerformed
        // TODO add your handling code here:
        String[] infoUbicacion = cmbMonitorDevices.getSelectedItem().toString().split(":");
        try {
            monitorIP = infoUbicacion[1];
            monitorPort = infoUbicacion[2];
            new ViewMonitorDisp().setVisible(true);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "No puedo acceder al dispositivo", "Error de conexion", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_btnMonitorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewManager().setVisible(true);
            }
        });
    }

    private void initializeMenu() {
        jmenuRendimiento.setText("Rendimiento");
        JMenu iniciarScannerOption = new JMenu("Monitorizar Rendimiento");
        jmenuRendimiento.add(iniciarScannerOption);
        for (String s : listaDevices) {
            JMenuItem i = new JMenuItem(s);
            i.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String[] infoUbicacion = i.getText().toString().split(":");
                    try {
                        ViewRendimiento v = new ViewRendimiento();
                        v.lblHost.setText(infoUbicacion[1]);
                        v.lblPort.setText(infoUbicacion[2]);
                        v.lblHostName.setText(infoUbicacion[0]);
                        v.setVisible(true);
                        

                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(null, "No puedo acceder al dispositivo", "Error de conexion", JOptionPane.ERROR_MESSAGE);

                    }
                }
            });
            iniciarScannerOption.add(i);
            
            JMenuItem i1 = new JMenuItem("Prediccion de Archivo RRD" + s);
            i1.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String[] infoUbicacion = i1.getText().toString().split(":");
                    try {
                        ViewRendimientoPredict v = new ViewRendimientoPredict();
                        v.lblHost.setText(infoUbicacion[1]);
                        v.lblPort.setText(infoUbicacion[2]);
                        v.lblHostName.setText(infoUbicacion[0]);
                        v.setVisible(true);
                        

                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(null, "No puedo acceder al dispositivo", "Error de conexion", JOptionPane.ERROR_MESSAGE);

                    }
                }
            });
            iniciarScannerOption.add(i1);
        }
        

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAgente;
    private javax.swing.JButton btnBorrarAgentes;
    private javax.swing.JButton btnEstadoDisp;
    private javax.swing.JButton btnMonitor;
    private javax.swing.JComboBox<String> cmbItemsEstado;
    private javax.swing.JComboBox<String> cmbMonitorDevices;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu jmenuRendimiento;
    private javax.swing.JMenuBar mbarManager;
    private javax.swing.JTextArea txtAEstatusGeneral;
    // End of variables declaration//GEN-END:variables

    private void initializeDeviceList(){
        listaDevices = new ArrayList<>();
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Snmpwalk snmpwalk = new Snmpwalk();
                    AgenteDAL adal = new AgenteDAL();
                    String lista = "";
                    adal.obtenerAgentes().forEach((item) -> {
                        listaDevices.add(item.getNombre() + " :" + item.getIp() + ":" + item.getPuerto());
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                }
                initializeMenu();
            }
        }).start();
    }
    private void startScanConnectedDevices() {
        listaDevices = new ArrayList<>();
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Snmpwalk snmpwalk = new Snmpwalk();
                    AgenteDAL adal = new AgenteDAL();
                    String lista = "";

                    for (AgenteSNMP item : adal.obtenerAgentes()) {
                        cmbItemsEstado.addItem(item.getNombre() + " :" + item.getIp() + ":" + item.getPuerto());
                        cmbMonitorDevices.addItem(item.getNombre() + " :" + item.getIp() + ":" + item.getPuerto());
                        lista = lista + "--------------- " + item.getNombre() + " ------------------ \n";
                        snmpwalk.commStr = item.getComunidad();
                        snmpwalk.portNum = item.getPuerto();
                        snmpwalk.targetAddr = item.getIp();
                        lista = lista + snmpwalk.getDevicesInitialStatus();
                    }
                    txtAEstatusGeneral.append(lista);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
        String infoDevices;
    }
}
